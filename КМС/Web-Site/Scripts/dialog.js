let knowledge = [
    ["фоторезистор", "измеряет", "вольт-амперную характеристику"],
    ["фоторезистор", "измеряет", "световую характеристику"],
    ["фоторезистор", "определяет", "интегральную чувствительность"],
    ["установка", "состоит", "из фоторезистора, источника света, миллиамперметра, вольтметра, источника напряжения, реостата"],
    ["источник света", "испускает", "световой поток"],
    ["реостат", "регулирует", "напряжение на фоторезисторе"],
    ["миллиамперметр", "измеряет", "ток в цепи"],
    ["вольтметр", "измеряет", "напряжение на фоторезисторе"],
    ["световой поток", "падает", "на поверхность фоторезистора"],
    ["расстояние", "влияет", "на величину светового потока"],
    ["сила света", "рассчитывается", "по формуле 1"],
    ["освещенность", "определяется", "по формуле 2"],
    ["освещенность", "падает", "перпендикулярно поверхности фоторезистора"],
    ["темновой ток", "протекает", "в отсутствии освещения"],
    ["фототок", "рассчитывается", "как разность светового и темнового токов"],
    ["вольт-амперная характеристика", "зависит ", "от напряжения на фоторезисторе"],
    ["вольт-амперная характеристика", "остается", "линейной при низких напряжениях"],
    ["световая характеристика", "зависит", "от светового потока"],
    ["полупроводниковые фоторезисторы", "имеют", "нелинейную световую характеристику"],
    ["скорость генерации", "определяется", "формулой 3"],
    ["скорость рекомбинации", "определяется", "формулой 4"],
    ["неравновесная концентрация", "определяется", "формулой 5"],
    ["неравновесная концентрация", "устанавливается", "в стационарном состоянии"],
    ["электронные ловушки", "влияют", "на процессы рекомбинации"],
    ["освещенность", "влияет", "на стационарную концентрацию носителей заряда"],
    ["стационарная концентрация", "пропорциональна", "освещенности при низкой интенсивности"],
    ["стационарная концентрация", "пропорциональна", "корню квадратному от освещенности при высокой интенсивности"],
    ["фототок", "пропорционален", "концентрации носителей заряда"],
    ["световая характеристика", "линейна", "при низкой освещенности"],
    ["световая характеристика", "нелинейна", "при высокой освещенности"],
    ["интегральная чувствительность", "равна", "отношению фототока к световому потоку"],
    ["удельная чувствительность", "равна", "отношению фототока к световому потоку и напряжению"],
    ["график зависимости", "показывает", "линейность в логарифмических координатах"],
    ["коэффициент пропорциональности", "влияет", "на характеристику светового потока"],
    ["фоторезисторы", "имеют", "спектральные характеристики"],
    ["установка", "исследует", "параметры фоторезистора при разных условиях"],
    ["реостат", "позволяет", "изменять напряжение"],
    ["источник света", "это", "точечным изотропным"],
    ["темновой ток", "обусловлен", "отсутствием освещения"],
    ["фототок", "увеличивается", "при падении светового потока"],
    ["закон Ома", "нарушается", "при высоких напряжениях"],
    ["стационарная концентрация", "достигается", "при равновесии генерации и рекомбинации"],
    ["скорость изменения концентрации", "равна", "нулю в стационарном состоянии"],
    ["генерация носителей", "зависит", "от интенсивности излучения"],
    ["рекомбинация носителей", "усиливается", "при увеличении концентрации"],
    ["световой поток", "измеряется", "в люменах"],
    ["вольт-амперная характеристика", "строится", "для различных напряжений"],
    ["освещенность", "измеряется", "в люксах"],
    ["темновой ток", "уменьшается", "при блокировке цепи"],
    ["фототок", "достигает", "максимума при определённой освещенности"],
    ["стационарное состояние", "влияет", "на световую характеристику"],
    ["площадь поверхности", "влияет", "на освещенность"],
    ["световой поток", "пропорционален", "силе света"],
    ["фоторезистор", "работает", "в цепях постоянного напряжения"],
    ["световая характеристика", "описывает", "зависимость фототока от светового потока"],
    ["фоторезисторы", "используются", "для определения освещенности"],
    ["параметры фоторезистора", "включают", "чувствительность и спектральную характеристику"],
    ["интегральная чувствительность", "зависит", "от площади поверхности"],
    ["удельная чувствительность", "учитывает", "напряжение на фоторезисторе"],
    ["источник света", "располагается", "на определённом расстоянии от фоторезистора"],
    ["установка", "исследует", "зависимость параметров от освещенности и напряжения"],
    ["формула 1", "определяет", "силу света"],
    ["формула 2", "определяет", "освещенность"],
    ["формула 3", "определяет", "скорость генерации носителей"],
    ["формула 4", "определяет", "скорость рекомбинации носителей"],
    ["формула 5", "описывает", "неравновесную концентрацию"],
    ["формула 6", "показывает", "равновесное состояние"],
    ["формула 7", "пропорциональна", "освещенности при низкой интенсивности"],
    ["формула 8", "пропорциональна", "корню квадратному от освещенности"],
    ["формула 9", "описывает", "промежуточное состояние"],
    ["формула 10", "отражает", "логарифмическую зависимость"],
    ["формула 11", "определяет", "интегральную чувствительность"],
    ["формула 12", "определяет", "удельную интегральную чувствительность"],

    ["падение напряжения", "измеряется", "вольтметром"],
    ["освещенность", "влияет", "на фотоэлектрический эффект"],
    ["материал фоторезистора", "определяет", "чувствительность и диапазон спектра"],
    ["спектральная характеристика", "показывает", "зависимость чувствительности от длины волны"],
    ["зависимость освещенности", "описана", "в формуле 13"],
    ["сопротивление фоторезистора", "изменяется", "при увеличении освещенности"],
    ["температура", "влияет", "на характеристики фоторезистора"],
    ["инфракрасное излучение", "поглощается", "определёнными материалами фоторезистора"],
    ["ультрафиолетовое излучение", "вызывает", "повышение фототока"],
    ["сопротивление", "пропорционально", "темновому току"],
    ["диапазон измерений", "ограничен", "характеристиками фоторезистора"],
    ["излучение", "передается", "через оптическую систему"],
    ["оптические фильтры", "используются", "для избирательного пропускания спектра"],
    ["использование фоторезисторов", "распространено", "в автоматических системах управления"],
    ["сопротивление", "снижается", "при увеличении светового потока"],
    ["логарифмическая зависимость", "характерна", "для интенсивного освещения"],
    ["параметры фоторезистора", "включают", "время отклика"],
    ["время отклика", "зависит", "от материала и конструкции фоторезистора"],
    ["площадь освещённой поверхности", "влияет", "на выходной ток"],
    ["мощность источника света", "регулируется", "настройкой системы"],
    ["выходной сигнал", "усиливается", "через операционный усилитель"],
    ["спектральная плотность", "определяется", "длиной волны источника"],
    ["оптическая плотность", "влияет", "на интенсивность пропущенного света"],
    ["освещенность", "уменьшается", "при увеличении расстояния до источника"],
    ["дифракция света", "влияет", "на распределение светового потока"],
    ["угол падения света", "определяет", "интенсивность отражённого потока"],
    ["оптические линзы", "концентрируют", "световой поток на фоторезисторе"],
    [
        "Джордж Симон Ом",
        "выглядит",
        "следующим образом: <img src='../images/Georg_Simon_Ohm3.jpg' class='img-to-scale' alt='' />",
    ]
  ];  

let endings = [
    ["ет", "(ет|ут|ют)"],
    ["ут", "(ет|ут|ют)"],
    ["ют", "(ет|ут|ют)"],

    ["ит", "(ит|ат|ят)"],
    ["ат", "(ит|ат|ят)"],
    ["ят", "(ит|ат|ят)"],

    ["ется", "(ет|ут|ют)ся"],
    ["утся", "(ет|ут|ют|ующие)ся"],
    ["ются", "(ет|ут|ют)ся"], //1 спряжение, возвратные

    ["ится", "(ит|ат|ят)ся"],
    ["атся", "(ит|ат|ят)ся"],
    ["ятся", "(ит|ат|ят)ся"], //2 спряжение, возвратные

    ["ящие", "ящие"],
    ["ee", "ee"],
    ["ен", "ен"],
    ["ую", "ую"],
    ["му", "му"],
    ["ма", "ма"],
    ["ена", "ена"],
    ["ено", "ено"],
    ["ены", "ены"],
    ["ан", "ан"],
    ["ая", "ая"],
    ["ана", "ана"],
    ["ано", "ано"],
    ["аны", "аны"], //краткие прилагательные
    ["но", "но"],
    ["на", "на"],
    ["жен", "жен"],
    ["жна", "жна"],
    ["жно", "жно"],
    ["жны", "жны"],
    ["такое", "- это"],
];

function escapeSpecialChars(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // Экранирование специальных символов
}

// поиск сказуемого по псевдоокончаниям
function getEnding(word) {
    for (let i = 0; i < endings.length; i++)
        // убираем, например -ет, -ут, -ют
        if (word.substring(word.length - endings[i][0].length) == endings[i][0]) {
            return i;
        }

    return -1;
}

function small(str) {
    return str.substring(0, 1).toLowerCase() + str.substring(1);
}

function big(str) {
    return str.substring(0, 1).toUpperCase() + str.substring(1);
}

function getAnswer(question) {
    question = escapeSpecialChars(question);
    let separators = "'\",.!?()[]\\/";

    //добавление пробелов перед знаками препинания
    for (let i = 0; i < separators.length; i++)
        question = question.replace(separators[i], " " + separators[i]);

    // приведем к нормальному виду
    let words = question.split(" ");

    for (let i = 0; i < words.length; i++) words[i] = small(words[i]);

    let result = false;
    let answer = "";

    // поиск по сказуемому
    for (let i = 0; i < words.length; i++) {
        let ending = getEnding(words[i]);

        // нашли сказуемое
        if (ending >= 0) {
            // заменить на слово с подходящим окончанием
            words[i] =
                words[i].substring(0, words[i].length - endings[ending][0].length) +
                endings[ending][1];

            // варинаты спряжений теперь доступны: "(ет|ут|ют)"
            let predicate = new RegExp(".*" + words[i] + ".*");

            // для кратких прилагательных без изменений
            if (endings[ending][0] == endings[ending][1]) {
                predicate = new RegExp(".*" + words[i] + " " + words[i + 1] + ".*");
                i++;
            }

            //создание регулярного выражения для поиска по подлежащему из вопроса
            let subjectReg = words.slice(i + 1).join(".*");

            if (subjectReg.length > 0) {
                // сможем выбрать подлежащее после сказуемого
                let subject = new RegExp(".*" + subjectReg + ".*");

                //поиск по 1 и 3 столбцу подлежащего, если они переставлены
                for (let j = 0; j < knowledge.length; j++) {
                    // console.log(subject.test(knowledge[j][2]));
                    // console.log(knowledge[j][2]);

                    if (
                        predicate.test(knowledge[j][1].toLowerCase()) &&
                        (subject.test(knowledge[j][0].toLowerCase()) ||
                            subject.test(knowledge[j][2].toLowerCase()))
                    ) {
                        // кладем в ответ
                        answer += big(
                            knowledge[j][0] + " " + knowledge[j][1] + " " + knowledge[j][2] + " . "
                        );
                        result = true;
                    }
                }

                if (!result) {
                    //поиск совпадений только с шаблоном подлежащего
                    for (let j = 0; j < knowledge.length; j++) {
                        if (
                            subject.test(
                                knowledge[j][0].toLowerCase() ||
                                    subject.test(knowledge[j][2].toLowerCase())
                            )
                        ) {
                            answer += big(
                                knowledge[j][0] + " " + knowledge[j][1] + " " + knowledge[j][2]
                            );
                            result = true;
                            break;
                        }
                    }
                }
            }
        }
    }

    if (!result) answer = "Ответ не найден";
    return answer;
}

var dialogOn = false;

function toggleDialog() {
    dialogOn = !dialogOn;
    $("#dialog").animate({ top: dialogOn ? "0" : "91%", bottom: dialogOn ? "0" : "unset" }, 600);
}

function prepare_environment() {
    document.body.innerHTML += "<div class='overlay' onclick='toggleDialog()'></div>";
    document.body.innerHTML += `<div id='dialog' class='dialog'>
      <div class='dialog-content'>
            <div class='header' onclick='toggleDialog()'>Задайте вопрос!</div>
            <div class='history' id='history'></div>
            <div class='question'>
                <input id='Qdialog' placeholder='Введите вопрос' onKeyDown='if(event.keyCode==13)ask(&quot;Qdialog&quot;)'/>
                <br>
                <button onclick='ask(&quot;Qdialog&quot;)'>Получить ответ</button>
            </div>
      </div>
    </div>`;
}

window.onload = function () {
    prepare_environment();
};

function ask(questionInput) {
    var question = document.getElementById(questionInput).value.trim();
    if (question === "") return;

    var newDiv = document.createElement("div");
    newDiv.className = "question";
    newDiv.innerHTML = question;
    document.getElementById("history").appendChild(newDiv);

    newDiv = document.createElement("div");
    newDiv.className = "answer";
    var answer = getAnswer(question);

    if (answer.includes("<img")) {
        let formattedAnswer = answer.slice(0, -2);
        newDiv.innerHTML = formattedAnswer;
    } else {
        newDiv.innerHTML = answer;
    }

    if (newDiv.innerHTML.includes("<img")) {
        // newDiv.innerHTML += `<img src="../images/zoom-in.png" width="16" height="16" onclick='zoom(this.src)' class="zoom-img" style='max-width: 0%; cursor: pointer;'/>`;

        const splitted = answer.split("<img");
        let func = `onclick="changeScale"`;
        answer = splitted[0] + "<img" + " " + func + splitted[1];

        console.log(answer);
    }

    document.getElementById("history").appendChild(newDiv);
    document.getElementById("history").scrollTop = document.getElementById("history").scrollHeight;
    document.getElementById(questionInput).value = "";
}

function zoom(src) {
    const newImg = document.createElement("img");
    newImg.src = src;
    newImg.id = "img-current-popup";

    newImg.style.position = "fixed";
    newImg.style.top = "10%";
    newImg.style.left = "30%";
    newImg.style.zIndex = "10000";
    newImg.style.minWidth = "30%";
    newImg.style.minHeight = "30%";
    newImg.style.borderRadius = "5%";

    document.body.appendChild(newImg);
}

function closeZoom() {
    const currentPopup = document.getElementById("img-current-popup");
    if (currentPopup) {
        currentPopup.remove();
    }
}

function changeScale(e) {
    e.target.style.transform = "scale(2)";
}

window.addEventListener("click", (e) => {
    const currentPopup = document.getElementById("img-current-popup");

    if (e.target.id === "img-current-popup") {
        closeZoom();
    }

    if (e.target.classList.contains("img-to-scale") && !currentPopup) {
        zoom(e.target.src);
    }
});


const container = document.getElementById("container");
    function renderOnScreen(question) {
      let heading = document.createElement("h2");
      let element = document.createElement("p");

      heading.innerHTML = question;
      element.innerHTML = getAnswer(question);

      container.appendChild(heading);
      container.appendChild(element);
    }
    for (i = 0; i < knowledge.length; i++) {
      question = `<Вопросит. слово> ${knowledge[i][1]} ${knowledge[i][0]}`;
      renderOnScreen(question);
      console.log(knowledge[i][1]);
    }
